# Template file for 'chroot-util-linux-libs'
pkgname=chroot-util-linux-libs
version=2.32.1
revision=2
wrksrc="util-linux-$version"
build_style=meta
configure_args=""
makedepends="zlib-devel"
depends="chroot-libfdisk-${version}_${revision} chroot-libblkid-${version}_${revision}
 chroot-libmount-${version}_${revision} chroot-libsmartcols-${version}_${revision}
 chroot-libuuid-${version}_${revision}"
short_desc="Miscellaneous linux utilities -- for xbps-src use"
maintainer="Enno Boland <gottox@voidlinux.org>"
license="GPL-2.0-or-later"
homepage="http://userweb.kernel.org/~kzak/util-linux-ng"
distfiles="${KERNEL_SITE}/utils/util-linux/v${version%.*}/util-linux-${version}.tar.xz"
checksum=86e6707a379c7ff5489c218cfaf1e3464b0b95acf7817db0bc5f179e356a67b2
conflicts="util-linux-libs>=0"
provides="util-linux-libs-${version}-${revision}"
bootstrap=y

if [ -z "$CHROOT_READY" ]; then
	CFLAGS+=" -I${XBPS_MASTERDIR}/usr/include"
	LDFLAGS+=" -L${XBPS_MASTERDIR}/usr/lib"
fi

pre_configure() {
	local _cfgdir="$XBPS_COMMONDIR/environment/configure"
	NOCONFIGURE=1 ./autogen.sh
	for f in ./**/*config*.sub; do
		if [ -f "$f" ]; then
			cp -f "$_cfgdir/automake/config.sub" "$f"
		fi
	done
	for f in ./**/*config*.guess; do
		if [ -f "$f" ]; then
			cp -f "$_cfgdir/automake/config.guess" "$f"
		fi
	done
	# We want to keep basepkg as meta but we also needs below helper
	unset build_style
	. "$_cfgdir/gnu-configure-args.sh"
}

do_configure() {
	./configure ${configure_args} --without-ncurses --without-ncursesw --without-udev \
		--disable-all-programs --enable-libblkid --enable-libfdisk --enable-libmount \
		--enable-libuuid --enable-libsmartcols \
		--without-systemd --without-readline scanf_cv_alloc_modifier=as \
		--exec-prefix=/usr --libdir=/usr/lib \
		--bindir=/usr/bin --sbindir=/usr/bin \
		--disable-makeinstall-chown --enable-fsck --disable-rpath \
		--enable-fs-paths-extra=/usr/sbin:/usr/bin \
		--enable-vipw --enable-newgrp --enable-chfn-chsh \
		--with-systemdsystemunitdir=no \
		--without-udev --without-python \
		--enable-write
}

do_build() {
	make ${makejobs}
}

do_install() {
	make usrsbin_execdir=/usr/bin DESTDIR=${DESTDIR} install
	# Those files will be provided by util-linux
	rm -rf "$DESTDIR/usr/bin"
	rm -rf "$DESTDIR/usr/share/man/man1"
	rm -rf "$DESTDIR/usr/share/man/man5"
	rm -rf "$DESTDIR/usr/share/man/man8"
	rm -rf "$DESTDIR/usr/share/bash-completion"
	rm -rf "$DESTDIR/usr/share/locale"
	rm -rf "$DESTDIR/usr/share/doc/"
}

chroot-libfdisk_package() {
	short_desc="Library for fdisk(8)"
	conflicts="libfdisk>=0"
	provides="libfdisk-${version}_${revision}"
	pkg_install() {
		vmove "usr/lib/libfdisk.so.*"
	}
}
chroot-libfdisk-devel_package() {
	depends="chroot-libblkid-devel-${version}_${revision} chroot-libfdisk-${version}_${revision}"
	short_desc="Library for fdisk(8) - development files"
	conflicts="libfdisk-devel>=0"
	provides="libfdisk-devel-${version}_${revision}"
	pkg_install() {
		vmove usr/lib/libfdisk.a
		vmove usr/lib/libfdisk.so
		vmove "usr/lib/pkgconfig/*fdisk*"
		vmove usr/include/libfdisk
	}
}
chroot-libmount_package() {
	short_desc="Library for mount(8)"
	conflicts="libmount>=0"
	provides="libmount-${version}_${revision}"
	pkg_install() {
		vmove "usr/lib/libmount.so.*"
	}
}
chroot-libmount-devel_package() {
	depends="chroot-libblkid-devel-${version}_${revision} chroot-libmount-${version}_${revision}"
	short_desc="Library for mount(8) - development files"
	conflicts="libmount-devel>=0"
	provides="libmount-devel-${version}_${revision}"
	pkg_install() {
		vmove usr/lib/libmount.a
		vmove usr/lib/libmount.so
		vmove "usr/lib/pkgconfig/*mount*"
		vmove usr/include/libmount
	}
}
chroot-libblkid_package() {
	short_desc="Library to handle device identification"
	conflicts="libblkid>=0"
	provides="libblkid-${version}_${revision}"
	pkg_install() {
		vmove "usr/lib/libblkid.so.*"
	}
}
chroot-libblkid-devel_package() {
	depends="zlib-devel chroot-libuuid-devel-${version}_${revision} chroot-libblkid-${version}_${revision}"
	short_desc="Library to handle device identification - development files"
	conflicts="libblkid-devel>=0"
	provides="libblkid-devel-${version}_${revision}"
	pkg_install() {
		vmove usr/include/blkid
		vmove usr/lib/libblkid.a
		vmove usr/lib/libblkid.so
		vmove usr/lib/pkgconfig/blkid.pc
		vmove usr/share/man/man3/libblkid.3
	}
}
chroot-libuuid_package() {
	short_desc="UUID library"
	conflicts="libuuid>=0"
	provides="libuuid-devel-${version}_${revision}"
	pkg_install() {
		vmove "usr/lib/libuuid.so.*"
	}
}
chroot-libuuid-devel_package() {
	depends="chroot-libuuid-${version}_${revision}"
	short_desc="UUID library development files"
	conflicts="libuuid-devel>=0"
	provides="libuuid-devel-${version}_${revision}"
	pkg_install() {
		vmove usr/lib/libuuid.a
		vmove usr/lib/libuuid.so
		vmove usr/lib/pkgconfig
		vmove usr/include/uuid
		vmove usr/share/man/man3/uuid*
	}
}
chroot-libsmartcols-devel_package() {
	depends="chroot-libsmartcols>=${version}_${revision}"
	short_desc="Table or Tree library from util-linux - development files"
	conflicts="libsmartcols-devel>=0"
	provides="libsmartcols-devel-${version}_${revision}"
	pkg_install() {
		vmove usr/lib/libsmartcols.a
		vmove usr/lib/libsmartcols.so
		vmove usr/include/libsmartcols
		vmove usr/lib/pkgconfig/smartcols*
	}
}
chroot-libsmartcols_package() {
	short_desc="Table or Tree library from util-linux"
	conflicts="libsmartcols>=0"
	provides="libsmartcols-${version}_${revision}"
	pkg_install() {
		vmove usr/lib/libsmartcols.so.*
	}
}
